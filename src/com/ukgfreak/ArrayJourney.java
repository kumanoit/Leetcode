package com.ukgfreak;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

/**
 * <QuestionLink>
 * <QuestionText>
 * Approach:
 * Complexity
 * 1. Time:
 * 2. Space:
 *
 * @author akumar on 6/18/22 IST 10:17 PM
 */
public class ArrayJourney {

    public static void main(String[] args) {
        Map<String, String> map = new HashMap<>();
        map.put("adsf", "defas");
        map.put("pwr", "asd");
        StringJoiner sj = new StringJoiner(":");
        String result = sj.add(map.toString()).toString();
        System.out.println(result);
//        System.out.println();
//        System.out.println((int)Double.NEGATIVE_INFINITY);
//        System.out.println(-Integer.MIN_VALUE);
//        System.out.println(journey(Arrays.asList(100,-70,-90,-80,100), 3));
//        System.out.println(journey(Arrays.asList(-3016,-3835,-2940,-8252,5697,-8063,8109,9388,9155,-6007,-4700,-2394,7786
//                ,8110,4979,-8703,-6822,3922,3182,7150,4623,1064,-6966,9867,-3389,-1696,8300,9007,5363,8688,-8384,1006,-6545,
//                -1923,9916,-1400,6703,1724,-5796,4729,4130,2027,2913,4926,-8247,8112,-3812,-3138,-4372,6810,8748,3630,-4720,
//                -5562,9987,4846,-8121,6459,-4995,-3931,1851,-4553,5157,-7591,-9077,3182,-2453,-4769,-6614,3495,-8289,7987,-8182,7376,9980,9273,9372,3270,2329,-9131,-2498,-5551,-5639,-7611,2257,2880,-3458,-9967,3094,-5057,-7687,1799,-8322,4368,-2592,-5812,3778,9028,5517,-9307,-3452,8345,7215,-7832,-6994,-6676,7272,-9917,-2879,-8788,4582,-2706,6798,-3163,-6734,-4073,-3393,5960,3822,1412,-9217,3161,-7881,-4304,-9479,-6070,4628,9441,-7814,6549,3838,-8941,5037,4864,1815,-6374,9750,-3042,4175,-8810,2024,5228,3951,-1230,4385,-8855,-8503,-4912,-1367,-2658,-1968,-8576,6639,-2409,-8663,-7933,7817,-5084,3202,1773,5940,9394,9124,-8754,-7355,-1122,-8984,2741,-7949,2238,-7839,-2095,-7045,-9578,9539,-9581,-5240,-4417,-9923,-6546,9340,-3179,9240,-8158,2861,6123,6132,-1733,3490,9592,-5701,-9596,-3853,-5316,1130,2910,2516,6424,-3754,1991,2422,8834,7009,-6101,2330,4842,-8516,-5601,-8942,5760,7543,5738,-1276,3744,-2388,-6983,3577,-8804,2503,-1721,-1887,4796,-6009,-7959,1983,-7332,3758,-7418,7995,-3834,1177,3255,9756,-3597,-9033,6918,-5184,-5167,-4966,-1542,1016,1603,5982,6777,5852,3096,3822,-3063,9547,1085,-3112,2307,-6780,-5446,-6799,7330,1723,-4170,4963,5454,-8321,9134,8768,8649,-8301,-2328,-8148,1665,5379,-3817,-1724,6474,4924,5367,-9617,-9980,4474,-1348,-2670,3976,-3912,-7987,-3482,-8941,7113,-7141,-5058,1142,2648,-6643,-1160,-9249,5878,-8425,-4733,-7616,-6032,3351,-9797,-7901,-3315,-1845,-2032,-4210,-9511,1569,-5379,-5118,-6018,-8836,-3188,6306,1108,9371,-4063,6191,2546,-8251,7486,-5222,5906,2703,1651,9387,-5776,-2600,-9994,-5621,2372,9610,-9531,3545,6829,-5302,5788,4453,-8889,-7422,6923,8854,6674,-6059,-5424,1653,-7997,-7162,-1730,4609,-1854,-1031,5065,-6036,3135,7860,-8764,-9957,-4699,-8868,1697,9046,2316,-8641,7676,-6828,-4439,5709,-3288,-4979,-2770,-5686,2474,8856,-8868,-3612,-5255,3452,-8458,2596,3846,2559,-2620,5131,-7836,1913,9875,5694,8038,7500,4895,-8760,9162,-3758,4764,-2037,-8580,-8611,5700,-2654,2062,9158,-7704,-9609,-6237,-4516,-2592,7077,-6302,-3487,-5380,-1578,6889,4097,9247,3259,7940,6903,-4009,6342,-5497,1643,1725,-9964,-2188,6499,9020,4587,8223,9422,-2533,5433,2692,-8978,7276,-9852,-2317,-5216,-3653,3802,-1469,5346,-6104,-9603,-6176,-4304,4377,-2371,-2407,-3602,6360,-1306,6966,7643,2619,-1841,-5896,4155,-2624,7333,8977,9650,7478,5216,-9382,1780,2900,7880,2579,3732,-2220,-7338,-1627,-8135,5187,-5693,-5717,7521,-5088,-3404,-7183,-8941,-1205,-5323,-5204,3172,3419,8576,6462,-3987,-7839,-4218,2604,-6845,-5410,3810,7450,-5208,-3944,7394,5668,5779), 500));
    }
//    private static long journey(List<Integer> path, int maxStep) {
//        int n = path.size();
//        long[] maxSum = new long[n];
//        maxSum[0] = path.get(0);
//        for (int i = 1; i < n; i++) {
//            int start = Math.max(0, i - maxStep);
//            long maxValue = maxSum[start];
//            for (int j = start + 1; j < i; j++) {
//                maxValue = Math.max(maxValue, maxSum[j]);
//            }
//            maxSum[i] = maxValue + path.get(i);
//        }
//        return maxSum[n - 1];
//    }
    private static long journey(List<Integer> path, int maxStep) {
        System.out.println(path.size());
        int n = path.size();
        long[] maxSum = new long[n];
        maxSum[0] = path.get(0);
        for (int i = 1; i < n; i++) {
            for (int j = Math.max(0, i - maxStep); j < i; j++) {
                maxSum[i] = Math.max(maxSum[i], maxSum[j] + path.get(i));
            }
        }
        return maxSum[n - 1];
    }
}
